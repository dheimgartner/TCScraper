Help on ActionChains in module selenium.webdriver.common.action_chains object:

class AAccttiioonnCChhaaiinnss(builtins.object)
 |  ActionChains are a way to automate low level interactions such as
 |  mouse movements, mouse button actions, key press, and context menu interactions.
 |  This is useful for doing more complex actions like hover over and drag and drop.
 |  
 |  Generate user actions.
 |     When you call methods for actions on the ActionChains object,
 |     the actions are stored in a queue in the ActionChains object.
 |     When you call perform(), the events are fired in the order they
 |     are queued up.
 |  
 |  ActionChains can be used in a chain pattern::
 |  
 |      menu = driver.find_element_by_css_selector(".nav")
 |      hidden_submenu = driver.find_element_by_css_selector(".nav #submenu1")
 |  
 |      ActionChains(driver).move_to_element(menu).click(hidden_submenu).perform()
 |  
 |  Or actions can be queued up one by one, then performed.::
 |  
 |      menu = driver.find_element_by_css_selector(".nav")
 |      hidden_submenu = driver.find_element_by_css_selector(".nav #submenu1")
 |  
 |      actions = ActionChains(driver)
 |      actions.move_to_element(menu)
 |      actions.click(hidden_submenu)
 |      actions.perform()
 |  
 |  Either way, the actions are performed in the order they are called, one after
 |  another.
 |  
 |  Methods defined here:
 |  
 |  ____eenntteerr____(self)
 |      # Context manager so ActionChains can be used in a 'with .. as' statements.
 |  
 |  ____eexxiitt____(self, _type, _value, _traceback)
 |  
 |  ____iinniitt____(self, driver)
 |      Creates a new ActionChains.
 |      
 |      :Args:
 |       - driver: The WebDriver instance which performs user actions.
 |  
 |  cclliicckk(self, on_element=None)
 |      Clicks an element.
 |      
 |      :Args:
 |       - on_element: The element to click.
 |         If None, clicks on current mouse position.
 |  
 |  cclliicckk__aanndd__hhoolldd(self, on_element=None)
 |      Holds down the left mouse button on an element.
 |      
 |      :Args:
 |       - on_element: The element to mouse down.
 |         If None, clicks on current mouse position.
 |  
 |  ccoonntteexxtt__cclliicckk(self, on_element=None)
 |      Performs a context-click (right click) on an element.
 |      
 |      :Args:
 |       - on_element: The element to context-click.
 |         If None, clicks on current mouse position.
 |  
 |  ddoouubbllee__cclliicckk(self, on_element=None)
 |      Double-clicks an element.
 |      
 |      :Args:
 |       - on_element: The element to double-click.
 |         If None, clicks on current mouse position.
 |  
 |  ddrraagg__aanndd__ddrroopp(self, source, target)
 |      Holds down the left mouse button on the source element,
 |         then moves to the target element and releases the mouse button.
 |      
 |      :Args:
 |       - source: The element to mouse down.
 |       - target: The element to mouse up.
 |  
 |  ddrraagg__aanndd__ddrroopp__bbyy__ooffffsseett(self, source, xoffset, yoffset)
 |      Holds down the left mouse button on the source element,
 |         then moves to the target offset and releases the mouse button.
 |      
 |      :Args:
 |       - source: The element to mouse down.
 |       - xoffset: X offset to move to.
 |       - yoffset: Y offset to move to.
 |  
 |  kkeeyy__ddoowwnn(self, value, element=None)
 |      Sends a key press only, without releasing it.
 |         Should only be used with modifier keys (Control, Alt and Shift).
 |      
 |      :Args:
 |       - value: The modifier key to send. Values are defined in `Keys` class.
 |       - element: The element to send keys.
 |         If None, sends a key to current focused element.
 |      
 |      Example, pressing ctrl+c::
 |      
 |          ActionChains(driver).key_down(Keys.CONTROL).send_keys('c').key_up(Keys.CONTROL).perform()
 |  
 |  kkeeyy__uupp(self, value, element=None)
 |      Releases a modifier key.
 |      
 |      :Args:
 |       - value: The modifier key to send. Values are defined in Keys class.
 |       - element: The element to send keys.
 |         If None, sends a key to current focused element.
 |      
 |      Example, pressing ctrl+c::
 |      
 |          ActionChains(driver).key_down(Keys.CONTROL).send_keys('c').key_up(Keys.CONTROL).perform()
 |  
 |  mmoovvee__bbyy__ooffffsseett(self, xoffset, yoffset)
 |      Moving the mouse to an offset from current mouse position.
 |      
 |      :Args:
 |       - xoffset: X offset to move to, as a positive or negative integer.
 |       - yoffset: Y offset to move to, as a positive or negative integer.
 |  
 |  mmoovvee__ttoo__eelleemmeenntt(self, to_element)
 |      Moving the mouse to the middle of an element.
 |      
 |      :Args:
 |       - to_element: The WebElement to move to.
 |  
 |  mmoovvee__ttoo__eelleemmeenntt__wwiitthh__ooffffsseett(self, to_element, xoffset, yoffset)
 |      Move the mouse by an offset of the specified element.
 |         Offsets are relative to the top-left corner of the element.
 |      
 |      :Args:
 |       - to_element: The WebElement to move to.
 |       - xoffset: X offset to move to.
 |       - yoffset: Y offset to move to.
 |  
 |  ppaauussee(self, seconds)
 |      Pause all inputs for the specified duration in seconds
 |  
 |  ppeerrffoorrmm(self)
 |      Performs all stored actions.
 |  
 |  rreelleeaassee(self, on_element=None)
 |      Releasing a held mouse button on an element.
 |      
 |      :Args:
 |       - on_element: The element to mouse up.
 |         If None, releases on current mouse position.
 |  
 |  rreesseett__aaccttiioonnss(self)
 |      Clears actions that are already stored locally and on the remote end
 |  
 |  sseenndd__kkeeyyss(self, *keys_to_send)
 |      Sends keys to current focused element.
 |      
 |      :Args:
 |       - keys_to_send: The keys to send.  Modifier keys constants can be found in the
 |         'Keys' class.
 |  
 |  sseenndd__kkeeyyss__ttoo__eelleemmeenntt(self, element, *keys_to_send)
 |      Sends keys to an element.
 |      
 |      :Args:
 |       - element: The element to send keys.
 |       - keys_to_send: The keys to send.  Modifier keys constants can be found in the
 |         'Keys' class.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  ____ddiicctt____
 |      dictionary for instance variables (if defined)
 |  
 |  ____wweeaakkrreeff____
 |      list of weak references to the object (if defined)
